<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <MajorVersion>3</MajorVersion>
    <MinorVersion>0</MinorVersion>
    <PatchVersion>0</PatchVersion>
    <PreReleaseLabel>preview</PreReleaseLabel>
    <PreReleaseVersionLabel>$(PreReleaseLabel)</PreReleaseVersionLabel>
    <OfficialBuildId Condition="'$(OfficialBuildId)' == ''">$(BUILD_BUILDNUMBER)</OfficialBuildId>
  </PropertyGroup>

  <PropertyGroup>
    <RestoreSources>
      $(RestoreSources);
      https://dotnet.myget.org/F/aspnetcore-dev/api/v3/index.json;
      https://dotnet.myget.org/F/aspnetcore-tools/api/v3/index.json;q
      https://dotnetfeed.blob.core.windows.net/dotnet-tools-internal/index.json;
      https://dotnet.myget.org/F/dotnet-core/api/v3/index.json;
      https://dotnetfeed.blob.core.windows.net/dotnet-core/index.json;
      https://api.nuget.org/v3/index.json;
    </RestoreSources>
  </PropertyGroup>

  <PropertyGroup Condition=" '$(OfficialBuildId)' != '' ">
    <!-- This implements core versioning. Spec: https://github.com/dotnet/arcade/blob/master/Documentation/CorePackages/Versioning.md -->
    <_BuildNumber>$(OfficialBuildId)</_BuildNumber>

    <!-- _BuildNumber from CI is assumed to have format "yyyyMMdd.r". -->
    <_BuildNumberYY>$(_BuildNumber.Substring(2, 2))</_BuildNumberYY>
    <_BuildNumberMM>$(_BuildNumber.Substring(4, 2))</_BuildNumberMM>
    <_BuildNumberDD>$(_BuildNumber.Substring(6, 2))</_BuildNumberDD>
    <_BuildNumberR>$(_BuildNumber.Substring(9))</_BuildNumberR>

    <!-- yy * 1000 + mm * 50 + dd -->
    <_BuildNumberShortDate>$([MSBuild]::Add($([MSBuild]::Add($([MSBuild]::Multiply($(_BuildNumberYY), 1000)), $([MSBuild]::Multiply($(_BuildNumberMM), 50)))), $(_BuildNumberDD)))</_BuildNumberShortDate>

    <VersionSuffixBuildOfTheDay>$([System.Convert]::ToInt32($(_BuildNumberR)))</VersionSuffixBuildOfTheDay>

    <_BuildNumberSuffix>$(_BuildNumberShortDate).$(VersionSuffixBuildOfTheDay)</_BuildNumberSuffix>
  </PropertyGroup>

  <PropertyGroup>
    <_BuildNumberSuffix Condition=" '$(_BuildNumberSuffix)' == '' ">0</_BuildNumberSuffix>
    <VersionPrefix>$(MajorVersion).$(MinorVersion).$(PatchVersion)</VersionPrefix>
    <VersionSuffix>$(PreReleaseLabel).$(_BuildNumberSuffix)</VersionSuffix>

    <ExperimentalVersionPrefix>0.1.$(PatchVersion)</ExperimentalVersionPrefix>

    <!-- Servicing builds have different characteristics for the way dependencies, baselines, and versions are handled. -->
    <IsServicingBuild Condition=" '$(PreReleaseLabel)' == 'servicing' ">true</IsServicingBuild>
    <!-- Run the build with /p:IsFinalBuild=true to produce the product with 'final' branding and versioning -->
    <IsFinalBuild Condition=" '$(IsFinalBuild)' == '' ">false</IsFinalBuild>
    <IncludePreReleaseLabelInPackageVersion>true</IncludePreReleaseLabelInPackageVersion>
    <IncludePreReleaseLabelInPackageVersion Condition=" '$(IsFinalBuild)' == 'true' AND ('$(PreReleaseLabel)' == 'servicing' OR '$(PreReleaseLabel)' == 'rtm')">false</IncludePreReleaseLabelInPackageVersion>

    <!-- The version in files -->
    <PackageVersion>$(VersionPrefix)</PackageVersion>
    <PackageVersion Condition=" '$(IncludePreReleaseLabelInPackageVersion)' == 'true' ">$(VersionPrefix)-$(VersionSuffix)</PackageVersion>

    <ExperimentalPackageVersion>$(ExperimentalVersionPrefix)</ExperimentalPackageVersion>
    <ExperimentalPackageVersion Condition=" '$(IncludePreReleaseLabelInPackageVersion)' == 'true' ">$(VersionPrefix)-$(VersionSuffix)</ExperimentalPackageVersion>

    <VersionMetadata Condition=" '$(DotNetProductBuildId)' != '' ">pb-$(DotNetProductBuildId)</VersionMetadata>
    <VersionSuffix Condition=" '$(VersionMetadata)' != '' ">$(VersionSuffix)+$(VersionMetadata)</VersionSuffix>
    <ExperimentalVersionSuffix>$(VersionSuffix)</ExperimentalVersionSuffix>

    <InformationalVersion>$(VersionPrefix)-$(VersionSuffix)</InformationalVersion>

    <!-- This is used for error checking to ensure generated code and baselines are up to date when we increment the patch. -->
    <PreviousExtensionsReleaseVersion Condition=" '$(PatchVersion)' != '0' ">$(MajorVersion).$(MinorVersion).$([MSBuild]::Subtract($(PatchVersion), 1))</PreviousExtensionsReleaseVersion>
  </PropertyGroup>

  <!-- Run 'dotnet msbuild version.props' to test changes to this file. -->
  <Target Name="InspectVersionNumbers">
    <Message Importance="High" Text="InformationalVersion    = '$(InformationalVersion)'" />
    <Message Importance="High" Text="PackageVersion          = '$(PackageVersion)'" />
  </Target>
</Project>
